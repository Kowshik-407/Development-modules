HTML BASICS From SoloLearn - 


THE WEB STRUCTURE - The ability to code using HTML is essential for any web professional. Acquiring this skill should be the starting point for anyone who is learning how to create content for the web.

Modern Web Design - 

HTML 		--> Structure
CSS  		--> Presentation 
JavaScript	--> Behavior

PHP 		--> Backend
CMS 		--> Content Management 


In HTML --> Tags are used to identify content
HTML is a Markup Language
title tag is placed in between head tags
body tag contains the visual part of webpage

Elements - 
To create a paragraph we use <p> ---- </p>
To create a single line break <br> or <br/>
<b> used for bold text
<big> used for big text (Not Supported in HTML5)
<i> used for italic text
<small> used for small text
<strong> used for strong text
<sub> used for subscripted text
<sup> used for superscripted text
<ins> used for inserted text
<del> used for deleted text
<h1> to <h6> tags are used for headings
<hr> or <hr/> used for horizontal lines
<!-- --> used for comments

HTML Attributes - These provide additional informataion about an element or a tag, while also modifying them. Most attributes have a value; the value modifies the attribute.
Attribute is used to modify the tag
Attribute measurements ----> <hr width="50px" /> Units for the width attribute are px and %
Align attribute - It is used to specify how the text is aligned <p align="center"> This is a text </p>

<img> tag is used to insert an image. It contains only attributes, and does not having a closing tag. src attribute for image's URL(address)
<img src='tree.jpg' height=1='150px' width='100px' border='1px' alt='tree image'/>

<a> tag is also an integral part of every web page. You can add links to text or images that will be enabled. href attribute to define the link's destination address.
<a href="http://www.sololearn.com" target="_blank"> Learn Playing </a> _blank is used to make the link open in a new tab or new window.

<ol> for ordered lists
<ul> for unordered lists
<li> for list items

<table> for creating tables
<tr> for creating a row
<td> for creating a column
<table border='2'> border attribute. This attribute is not supported in HTML5
<td colspan='2'> it is used for combining the two column tabs. a22 and a23
<tr rowspan='2'> it is used for combining the two row tabs. a21 and b21
<td bgcolor='red'> Red </td>

Types of elements - 
In HTML, most elements are defined as block level or inline elements.

Block level elements start from a new line. Ex :: <h1>, <form>, <li>, <ol>, <ul>, <p>, <table>, <div>, etc.,
Inline elements are normally displayed without line breaks. Ex :: <b>, <a>, <strong>, <img>, <input>, <em>,etc

<div> :: This element is a block level element that is often used as a container for other HTML elements and it is used to style blocks of content
<div style="background-color:green; color:white; padding:20px;">

<span> :: This element is an inline element that is often used as a container for some text and it can be used to style parts of text
<h2> Some <span style="color:red"> Important </span> Message </h2>

Block level elements CAN contain inline elements EX :: You can have multiple <span> elements inside a <div>
Inline elements CANNOT contain any block level elements

Types of elements - 
Other elements can be used either as block level elements or inline elements. 
This include - 
APPLET 	--> Embedded Java Applet
IFRAME  --> Inline Frame
INS 	--> Inserted text
MAP 	--> Image Map
OBJECT	--> Embedded Object
SCRIPT 	--> Script within an HTML document 

HTML Forms - 
<form> is used to collect information from the user. Uses the action attribute to point to a webpage that will load after the user submits the form.
<form action="http://www.sololearn.com"> </form>

method attribute that specifies the HTTP method (GET and POST) to be used when forms are submitted.
GET  - The data will be visible in the page address.
POST - It includes sensitive information (passwords) and it offers better security because the submitted data is not visible in the page address

<input> element has many variations, depending on the type attribute. It can be text, password, radio, URL, submit, etc.,
<input type="text" name="username" /> <br>
<input type="password" name="password" /> name attribute specifies a name for a form
<input type="radio" name="gender" value="male" /> MALE
<input type="radio" name="gender" value="female" /> FEMALE

<input type="checkbox" name="gender" value="male" /> MALE Value attribute indicates the value in HTML page

<input type="checkbox" name="gender" value="male" /> MALE
input tag has no end tag
<input type="submit" value="Submit" /> Submit button submits a form 
<input name="email" type="email" /> <br>
<textarea name="message"></textarea> textarea is used to support multiple lines of input

HTML Colors are expressed as hexadecimal values - 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
HTML Color Model - 
Colors are displayed in combinations of RED, GREEN, BLUE (RGB)
Hexa values are written using the hashtag Symbol (#), followed by either three or six hex characters
RGB Values are supported in all browsers

<body bgcolor="#000099"> bgcolor specifies the background color of HTML page
<font color="#FFFFFF"> White headline </font> color specifies the color of the text inside a font element

<frame> tag defines one specific window(frame) within a <frameset>. Each frame in a frameset can have different attributes, such as border, scrolling, the ability to resize, etc.,

<frameset> element specifies the number of columns or rows in the frameset, as well as the % of pixels of space <frameset cols="100, 25%, *"></frameset> 
<frameset> tag is not supported in HTML5
<frame> tag requires rows and cols to indicate its size. Frame tag is not supported in HTML5

width='100' and width='100%' is not same

HTML5 Declaration - <!DOCTYPE HTML>
Character Encoding (charset) declaration - <meta charset="UTF-8">

New elements in HTML5 - <article>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <footer>, <header>, <nav>, <output>, <progress>, <section>, <video>, etc.,






NEW IN HTML5 

Forms ----> 
- The Web Forms 2.O specification allows for creation of more powerful forms and more compelling user experiences
- Date pickers, color pickers, and numeric stepper controls have been added.
- Input field types now include email, search, and URL
- PUT and DELETE form methods are now supported.

Integrated API ( Application Programming Interfaces )
---------------------------------
- Drag and Drop
- Audio and Video
- Offline Web Applications
- History
- Local Storage
- Geolocation
- Web Messaging

The LIST of Content Models --> 
In HTML, elements typically belonged in either the block level or inline content model. HTML5 introduces seven main content models
- Metadata
- Embedded
- Interactive
- Heading
- Phrasing 
- Flow
- Sectioning
In HTML5 content models are designed to make the markup strucure more meaningful for both the browser and the web designer


CONTENT MODELS - 

Metadata ---> Content that sets up the presentation or behavior of the rest of the content. These elements are found in the head of the document. 
Elements - <base>, <link>, <noscript>, <script>, <style>, <title>

Embedded ---> Content that imports other resources into the document
Elements - <audio>, <video>, <canvas>, <iframe>, <img>, <math>, <object>, <svg>

Interactive ---> Content specifically intended for user interaction
Elements - <a>, <audio>, <video>, <button>, <details>, <embed>, <iframe>, <img>, <input>, <label>, <object>, <select>, <textarea>

Heading  ---> Defines a section Header
Elements - <h1> to <h6>, <hgroup>

Phrasing ---> This model has a number of inline elements in common with HTML4
Elements - <img>, <span>, <strong>, <label>, <br />, <small>, <sub>

Flow Content ---> Contains the majority of HTML5 elements that would be included in the normal flow of the document.

Sectioning Content ---> Defines the scope of headings, content, navigation, and footers
Element - <arcticle>, <aside>, <nav>, <section>

|-----------------------------------------------------------------------|
|			<header>					|
|		Contains the brandings like logo			|
|-----------------------------------------------------------------------|
|			<nav>						|
|		Contains navigational section to the site		|
|-----------------------------------------------------------------------|		
|	<article>		|					|
|Web page main content		|	<aside>				|	
|	<section>		|  Contains extra information		|
|Divided section of main content|	  and related content or links	|
|-----------------------------------------------------------------------|
|			<footer>					|
|Information about copyright, privacy policy, terms of use, etc.,	|
|-----------------------------------------------------------------------|

HEADER 
----------------
<header> </header> This tag is completely different from the <head> tag
<header> tag is used inside of the body tag

FOOTER
----------------
<footer> </footer> this is widely used. This is located at the very bottom of the web page
The following information is usually provided between these tags :: 
- Content Information 
- Privacy Policy
- Social Media Icons
- Terms of Service
- Copyright Information 
- Sitemap and Related Documents


NAV
-----------------
<nav> element represents a section of a page that links to other pages or to certain sections within the page.

ARTICLE
-----------------
<article> element is a self-contained, independent piece of content that can be used and distribted seperately from the rest of the page or site. 
<article> element replaces the <div> element that was widely used in HTML4
<article> element is nested, the inner element represents an article related to the outer element.

SECTION
-----------------
<section> element is a logical container of the page or article.
Sections can be used to divide up content within an article.

ASIDE
-----------------
<aside> is a secondary or tangential content which could be considered seperate form but indirecly related to the main content.
<aside> tag is used within an <article> tag.

AUDIO
-----------------
<audio> tag is used to play audio files on a web page.
There are two different ways to specify the audio source file's URL
Case 1 :: 
<audio src="audio.mp3" controls> Audio Element not supported by your browser </audio>
Case 2 ::
<audio controls>
	<source src="audio.mp3" type="audio/mpeg">
	<source src="audio.ogg" type="audio/ogg">
	Audio element not supported by your browser
</audio>

Attributes of <audio>
controls - Specifies that audio controls should be displayed(such as a play/pause button, etc.,)
autoplay - When this attribute is defined, audio starts playing as soon as it is ready, without asking for the visitor's permission
loop     - This attribute is used to have the audio replay every time it is finished
<audio controls autoplay loop>


VIDEOS in HTML - 
--------------------
<video controls>
	<source src="video.mp3" type="video/mpeg">
	<source src="video.ogg" type="video/ogg">
	Video element not supported by your browser
</video>

Attributes of Video
<video controls autoplay loop>
	<source src="video.mp3" type="video/mpeg">
	<source src="video.ogg" type="video/ogg">
	Video element not supported by your browser
</video>

Progress Bar
-----------------
<progress> element provides the ability to create progress bars on the web. Progress element can be used within headings, paragraphs, or anywhere else in the body

Attributes of Progress
Value :: Specifies how much of the task has been completed
Max   :: Specifies how much work the task requires in total

Status : <progress min='0' max='100' value='35'> </progress>


With HTML5 web storage, websites can store data on a user's local computer. Before HTML5, we had to use Javascript Cookies to achieve this functionality. 

Advantages - 
1. More Secure
2. Faster
3. Stores a larger amount of data 
4. Stored data is not sent with every server request

Types of Web Storage Objects - 
-------------------------------
There are two types of web storage objects - 
- SessionStorage()
- LocalStorage()

Local vs Session - 
Session storage is destroyed once the user closes the browser
Local storage stores data with no expiration date

Syntax for web storage for both local and session storage - 

Storing a value - localStorage.setItem("key1", "value1");
Getting a value - alert(localStorage.getItem("key1")); --> This will print the value
Removing a valu - localStorage.removeItem("key1");
Removing all va - localStorage.clear();

For session Storage - Same syntax instead of localStorage, we can have sessionStorage is used


What is the Geolocation API : In HTML5, the Geolocation API is used to obtain the user's geographical location
Geolocation is more accurate for the devices with GPS, like smartphones

HTML Geolocation - 
-------------------------
The Geolocation API's main method is getCurrentPositon, which retrives the current geographic location of the user's device. ---> navigator.geolocation.getCurrentPosition();

Parameters - 
showLocation(mandatory): Defines the callback method that retrives location information
ErrorHandler(optional):  Defines the callback method that is invoked when an error occurs in processing the asynchronous call. 
Options(optional): Defines a set of options for retrieving the location information. 


Presenting Data - 
User location can be presented in two ways: GEODETIC and CIVIC

1. The geodetic way to describe position refers directly to lattitude and longitude
2. The civic representation of location data is presented in a format that is more easily read and understood by the average person. 

Example : 
Attribute - Position 
Geodetic  - 59.3, 18.6
Civic     - Stockholm

getCurrentPosition() returns lattitude, longitude, and accuracy properties


DRAG AND DROP API
------------------------------
DRAG AND DROP API - The drag and drop feature lets you "grab" an object and drag it to a different location.
Draggable attribute - <img draggable="true" />

<!DOCTYPE HTML>
<html>
   <head>
   <script>
function allowDrop(ev) {
    ev.preventDefault();
}

function drag(ev) {
    ev.dataTransfer.setData("text", ev.target.id);
}

function drop(ev) {
    ev.preventDefault();
    var data = ev.dataTransfer.getData("text");
    ev.target.appendChild(document.getElementById(data));
}
   </script>
   </head>
<body>

   <div id="box" ondrop="drop(event)"
   ondragover="allowDrop(event)"
   style="border:1px solid black; 
   width:200px; height:200px"></div>

   <img id="image" src="sample.jpg" draggable="true"
   ondragstart="drag(event)" width="150" height="50" alt="" />

</body>
</html>

What to Drag
-------------------------
When the element is dragged, the ondragstart attribute calls a function, drag(event), which specifies what data is to be dragged.
The dataTransfer.setData() method sets the data type and the value of the dragged data:
function drag(ev) {
    ev.dataTransfer.setData("text", ev.target.id);
}
JS
In our example, the data type is "text" and the value is the ID of the draggable element ("image").

Where to Drop
--------------------------
The ondragover event specifies where the dragged data can be dropped. By default, data and elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element.
This is done by calling the event.preventDefault() method for the ondragover event.

Do the Drop
------------------------
When the dragged data is dropped, a drop event occurs.
In the example above, the ondrop attribute calls a function, drop(event):
function drop(ev) {
    ev.preventDefault();
    var data = ev.dataTransfer.getData("text");
    ev.target.appendChild(document.getElementById(data));
}

The preventDefault() method prevents the browser's default handling of the data (default is open as link on drop).
The dragged data can be accessed with the dataTransfer.getData() method. This method will return any data that was set to the same type in the setData() method.
The dragged data is the ID of the dragged element ("image").

At the end, the dragged element is appended into the drop element, using the appendChild() function.



Drawing Shapes - 
-----------------------
SVG stands for Scalable Vector Graphics, and is used to draw shapes with HTML-style markup 

Inserting SVG Images - <img src="image.svg" alt="" height="300" />

Drawing a Circle - To draw shapes with SVG, you first need to create an SVG element tag with two attributes - Width and Height
<svg width='1000' height='1000'></svg>

To create a circle, use <circle> tag
<svg width='2000' height='2000'>
	<circle cx='80' cy='80' r='50' fill='red' />
</svg>

cx - pushes the center of the circle further to the right of the screen
cy - pushes the center of the circle further down from the top of the screen
r  - defines the radius
fill - determines the color of our circle
stroke - adds an outline to the circle

Rectangle - <rect>
<svg width='2000' height='2000'>
	<rect width='300' height='100' x='20' y='20' fill='green' />
</svg>

Line - <line>
<svg width='400' height='410'>
	<line x1='10' y1='10' x2='200' y2='100' style="stroke:#000CCF;stroke-linecap:round; stroke-width:20"/>
</svg>
(x1,y1) are the start Coordinates (x2,y2) are the end Coordinates

polyline - <polyline>
<svg width='2000' height='500'>
	<polyline style='stroke-linejoin:miter; stroke:black; stroke-width:12; fill:none;" points="100 100, 150 150, 200 100" />
</svg>

Ellipse - <ellipse>
It is similar to the <circle> 
<svg height='500' width='1000'>
	<ellipse cx='2000' cy='100' rx='150' ry='70' style="fill:yellow"/>
</svg>

Polygon - <polygon> used to create a graphic with at least three sides.
<svg width='2000' height='2000'>
	<polygon points='100 100, 200 200, 300 0' style="fill:green; stroke:black;" />
</svg>

polygon - many angle


SHAPE ANIMATIONS - 
SVG animations can be created using the <animate> element. 
<svg width='1000' height='250'>
	<rect width='150' height='150' fill='orange'>
		<animate attributeName='x' from='0' to='300' dur='3s' fill='freeze' repeatCount='2'/>
	</rect>
</svg>
attributeName - Specifies which attribute will be affected by the animation
from 	- Specifies the starting value of the attribute
to 	- Specifies the ending value of the attribute
dur 	- Specifies how long the animation runs (duration)
fill	- Specifies whether of not the attribute's value should return to its initial value when the animation is fineished. 'remove' resets the value 'freeze' keeps the 'to value'
repeatCount - Specifies the repeat count of the animation


PATHS -
----------------------------
PATHS - <path> element is used to define a path. 
Commands are available for path data:
M - Moveto 
L - Lineto 
H - Horizontal lineto 
V - Vertical lineto 
C - Curveto 
S - Smooth Curveto 
Q - Quadratic Bezier curve
T - Smooth quadratic bezier curveto
A - Elliptical Arc
Z - Closepath

Define a path using the d attribute - 
<svg width='500' height='500'>	
	<path d="M 0 0 L200 200 L200 0 Z" style="stroke:#000; fill:none;" />
</svg>

M places our "virtual pen" down at the position 0,0. It then moves 200px down and to the right, then moves up to the position 200, 0. The Z command closes the shape, results hypotenuse triangle

<path d="M 0 0 L0 100 L100 100 L100 0 Z"/> -----> Square


CANVAS - 
-----------------
The HTML Canvas is used to draw graphics that include everything from simple lines to complex graphic objects. 

<canvas> element -----> <canvas id="canvas1" width="200" height="100"> </canvas>
Canvas element must have an id attribute. 


<html>
   <head></head>
   <body>
     <canvas id="canvas1" 
   width="400" height="300"></canvas> 

   <script>
      var can = document.getElementById("canvas1"); 
      var ctx = can.getContext("2d");
   </script>

   </body>
</html>

getContext() returns a drawing context on the canvas.


Canvas Coordinates - 
The HTML Canvas is a 2D grid
Coordinates are (0,0) initially. 
X coordinate increases to the right
Y coordinate increases toward the bottom of the canvas. 

Drawing shapes in Javascript --> 
The fillRect(x,y,w,h) method draws a "filled" rectangle, in which w indicates width and h indicates height. Default Color is black

A black 100*100 pixel rectangle is drawn on the canvas at the position (20,20)

var c=document.getElementById("canvas1");
var ctx=c.getContext("2d");
ctx.fillRect(20,20,100,100); ---------------> This results black Square 100*100 from (20,20)

fillStyle property is used to set a color, gradient, or pattern to fill the drawing.
var c=document.getElementById("canvas1");
var ctx=c.getContext("2d");
ctx.fillStyle = "rgba(0,200,0,1)";
ctx.fillRect(36,10,22,22);

The canvas support various other methods for drawing: 

Draw a Line
--------------
moveTo(x,y): Defines the starting point of the line.
lineTo(x,y): Defines the ending point of the line.

Draw a Circle
---------------
beginPath(): Starts the drawing. 
arc(x,y,r,start,stop): Sets the parameters of the circle. 
stroke(): Ends the drawing. 

Gradients 
--------------
createLinearGradient(x,y,x1,y1): Creates a linear gradient
createRadialGradient(x,y,r,x1,y1,r1): Creates a radial/circular gradient

Drawing Text on the canvas 
----------------------------
Font: Defines the font properties for the text. 
fillText(text,x,y): Draws "filled" text on the canvas
strokeText(text,x,y): Draws text on the canvas (no fill)


Canvas vs. SVG

Canvas
- Elements are drawn programmatically
- Drawing is done with pixels
- Animations are not built in
- High performance for pixels-based drawing operations
- Resolution dependent
- No support for event handlers
- You can save the resulting image as .png or .jpg
- Well suited for graphic-intensive games

SVG
- Elements are part of the page's DOM (Document object model)
- Drawing is done with vectors
- Effects, such as animations are built in
- Based on standard XML syntax, which provides better accessibility
- Resolution independent
- Support for event handlers
- Not suited for game applications
- Best suited for applications with large rendering areas (for example, Google Maps)

You can actually use both SVG and canvas on the same page, if needed.
However, you cannot just draw SVG onto a canvas, or vice-versa.

Working with Canvas
------------------------
The Canvas element can be transformed. 
ctx.font="bold 22px Tahoma";
ctx.textAlign="start";
ctx.fillText("start",10,30);

translate(x,y) method is used to move the Canvas. 

ctx.translate(100,150);
ctx.fillText("after translate",10,20);

rotate() method is used to rotate the HTML5 Canvas. The value must be in radians, not degrees.

ctx.fillStyle="#FF0000";
ctx.fillRect(10,10,100,100);

ctx.rotate( (Math.PI / 180)*25 ); // rotate 25 degress.
ctx.fillStyle= "#0000FF";
ctx.fillRect(10,10,100,100);


scale() method scales the current drawing. It takes two parameters:
1. The number of times by which the image should be scaled in the X-direction.
2. The number of times by which the image should be scaled in the Y-direction.


var canvas = document.getElementById('canvas1');
ctx=canvas.getcontext('2d');
ctx.font="bold 22px Tahoma";
ctx.textAlign="start";
ctx.fillText("start",10,30);
ctx.translate(100,150);
ctx.fillText("after translate",0,0);
ctx.rotate(1);
ctx.fillText("after rotate",0,0);
ctx.scale(1.5,4);
ctx.fillText("after scale", 0, 20);


HTML5 FORMS 
----------------------------
<form> 
	<label> Your Name: </label>
	<input id="user" name="username" type="text" />
</form>

Attributes ---> 
1. placeholder attribute on <input> and <textarea> elements
<form>
	<label for="email"> Your e-mail address: </label>
	<input type="text" name="email" placeholder="email@example.com" />
</form>

2. autofocus attribute makes the desired input focus when the form loads
<form>
	<label for="email"> Your e-mail address: </label>
	<input type="text" name="email" autofocus />
</form>

3. required attribute is used to make the input elements required
<form autocomplete="off">
	<label for="email"> Your e-mail address: </label>
	<input name="Email" type="text" required />
	<input type="submit" value='Submit'/>
</form>

The autocomplete attribute specifies whether a form or input field should have autocomplete turned on or off.
When autocomplete is on, the browser automatically complete values based on values that the user has entered before.

HTML5 added several new input types: 
---------------------
- color
- date
- datetime
- datetime-local
- email 
- month
- number
- range 
- search 
- tel 
- time
- url 
- week 

New input attributes in HTML5 : 
---------------------------------
- autofocus
- form
- formenctype
- formmethod
- formnovalidate
- formtarget
- height and width 
- list 
- min and max
- multiple 
- pattern(regexp)
- placeholder
- required
- step 

Creating a Search Box 
------------------------
The new search input type can be used to create a search box:
<input id="mysearch" name="searchitem" type="search" />
Note :: You must remember to set a name for your input; otherwise, nothing will be submitted.

Seach Options: 
<datalist> tag can be used to define a list of pre-defined options for the search field: 

<input id="car" type="text" list="colors"/>
<datalist id="colors">
	<option value="Red">
	<option value="Green">
	<option value="Yellow">
</datalist>
----> <option> defines the options in a drop-down list for the user to select. 

Creating more fields: It includes email, url, tel
-----------------------------------
<input id="email" name="email" type="email" placeholder="example@example.com"/>
<br/>
<input id="url" name="url" type="url" placeholder="example.com" />
<br/>
<input id="tel" name="tel" type="tel" placeholder="555-555-5555"/>
